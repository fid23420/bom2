Public Sub UpdateSheetWithSequence()
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim compareWs As Worksheet
    Dim conditionWs As Worksheet
    Dim dataDict As Object
    Dim excludeDict As Object
    Dim rowIndex As Long
    Dim sequenceValue As String

    ' Dictionary 생성
    Set dataDict = CreateObject("Scripting.Dictionary")
    Set excludeDict = CreateObject("Scripting.Dictionary")

    ' 조건 시트에서 제외할 시트 목록 가져오기
    Set conditionWs = ThisWorkbook.Worksheets("조건")
    lastRow = conditionWs.Cells(conditionWs.Rows.Count, 1).End(xlUp).Row
    For rowIndex = 2 To lastRow
        Dim excludeSheet As String
        excludeSheet = CleanString(conditionWs.Cells(rowIndex, 1).Value) ' 조건 시트의 "시트 제외" 열 기준
        Debug.Print "Exclude Sheet: " & excludeSheet ' 디버그 메시지 추가
        If Len(excludeSheet) > 0 And Not excludeDict.exists(excludeSheet) Then
            excludeDict.Add excludeSheet, True
            Debug.Print "Sheet added to exclusion: " & excludeSheet ' 디버그 메시지 추가
        End If
    Next rowIndex

    ' 비교 시트 데이터 읽기
    Set compareWs = ThisWorkbook.Worksheets("비교")
    lastRow = compareWs.Cells(compareWs.Rows.Count, 1).End(xlUp).Row
    For rowIndex = 2 To lastRow
        Dim compareKey As String
        compareKey = CleanString(compareWs.Cells(rowIndex, 1).Value) & "|" & _
                     CleanString(compareWs.Cells(rowIndex, 2).Value) & "|" & _
                     CleanString(compareWs.Cells(rowIndex, 3).Value) ' Name, Width, Utility 기준
        If Not dataDict.exists(compareKey) Then
            dataDict.Add compareKey, compareWs.Cells(rowIndex, 4).Value ' 순번 값 저장
            Debug.Print "Added to dataDict: " & compareKey ' 디버그 메시지 추가
        End If
    Next rowIndex

    ' 모든 시트를 순회하며 데이터 업데이트
    For Each ws In ThisWorkbook.Worksheets
        Debug.Print "Processing Sheet: " & ws.Name ' 디버그 메시지 추가
        ' 제외할 시트 목록에 포함되지 않은 시트만 처리
        If excludeDict.exists(ws.Name) Then
            Debug.Print "Sheet is excluded: " & ws.Name ' 디버그 메시지 추가
            GoTo NextSheet
        End If
        
        Debug.Print "Sheet is not excluded: " & ws.Name ' 디버그 메시지 추가
        On Error Resume Next
        
        ' 헤더 위치 동적으로 찾기
        Dim nameCol As Long, widthCol As Long, utilityCol As Long, seqCol As Long
        nameCol = FindColumn(ws, "name")
        widthCol = FindColumn(ws, "width/diameter")
        utilityCol = FindColumn(ws, "utility")
        seqCol = FindColumn(ws, "순번")
        
        ' 순번 열이 없다면 새로 추가
        If seqCol = 0 Then
            seqCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column + 1
            ws.Cells(1, seqCol).Value = "순번"
            Debug.Print "Added sequence column to: " & ws.Name ' 디버그 메시지 추가
        End If
        
        ' 각 열이 발견되지 않은 경우 메시지를 출력하고 다음 시트로 이동
        If nameCol = 0 Or widthCol = 0 Then ' utility 열을 제외
            MsgBox "필요한 헤더를 찾을 수 없습니다. 시트: " & ws.Name, vbExclamation
            GoTo NextSheet
        End If
        
        ' 시트의 마지막 행 찾기
        lastRow = ws.Cells(ws.Rows.Count, nameCol).End(xlUp).Row
        
        ' 순번 데이터를 업데이트
        For rowIndex = 2 To lastRow
            If Len(Trim(ws.Cells(rowIndex, nameCol).Value)) > 0 Then
                Dim key As String
                key = CleanString(ws.Cells(rowIndex, nameCol).Value) & "|" & _
                      CleanString(ws.Cells(rowIndex, widthCol).Value)
                
                ' 매칭되는 키가 있는 경우 순번 값을 업데이트
                If dataDict.exists(key) Then
                    ws.Cells(rowIndex, seqCol).Value = dataDict(key)
                Else
                    ws.Cells(rowIndex, seqCol).Value = "N/A"
                End If
            End If
        Next rowIndex
        
NextSheet:
    Next ws
End Sub

Public Function FindColumn(ws As Worksheet, header As String) As Long
    Dim cell As Range
    For Each cell In ws.Rows(1).Cells
        If LCase(Trim(cell.Value)) = LCase(Trim(header)) Then
            FindColumn = cell.Column
            Exit Function
        End If
    Next cell
    FindColumn = 0 ' 헤더를 찾지 못한 경우
End Function

Public Function CleanString(inputString As String) As String
    ' 공백 제거 및 대소문자 통일, 숨겨진 문자 제거
    On Error Resume Next
    inputString = Trim(inputString) ' 앞뒤 공백 제거
    inputString = Replace(inputString, Chr(160), " ") ' 비정상적인 공백 문자를 일반 공백으로 변경
    inputString = Replace(inputString, vbCr, "") ' 캐리지 리턴 제거
    inputString = Replace(inputString, vbLf, "") ' 줄 바꿈 제거
    inputString = Replace(inputString, vbTab, "") ' 탭 제거
    CleanString = LCase(inputString) ' 소문자로 변환
    On Error GoTo 0
End Function
